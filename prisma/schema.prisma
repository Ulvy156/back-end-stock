// npx prisma migrate reset


//npx prisma migrate dev --name init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Role Enum
enum RoleEnum {
  ADMIN
  WAREHOUSE_MANAGER
  SELLER
  AUDITOR
}

// Users
model User {
  id            String             @id @default(uuid())
  name          String
  email         String          @unique
  password      String
  role          RoleEnum        @default(SELLER)
  purchases     Purchase[]      // One-to-many
  sales         Sale[]          // One-to-many
  warehouses    UserWarehouse[] // Many-to-many with Warehouses
  audit_logs    AuditLog[]      // One-to-many
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

// Customers
model Customer {
  id            String       @id @default(uuid())
  name          String
  phone         String?   @unique
  telegram      String?
  address       String?
  lastOrderDate DateTime?
  totalOrders   Int       @default(0)
  totalSpent    Float     @default(0)
  mapUrl        String?
  sales         Sale[]    // One-to-many
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Warehouses
model Warehouse {
  id            Int               @id @default(autoincrement())
  name          String            @unique
  location      String?           // e.g., "Hanoi", "Ho Chi Minh City"
  purchases     Purchase[]        // One-to-many
  sales         Sale[]            // One-to-many
  product_stocks ProductWarehouse[] // One-to-many
  users         UserWarehouse[]   // Many-to-many with Users
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

// UserWarehouse (junction table for sellers assigned to warehouses)
model UserWarehouse {
  user_id      String
  warehouse_id Int
  user         User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  warehouse    Warehouse @relation(fields: [warehouse_id], references: [id], onDelete: Cascade)
  createdAt    DateTime  @default(now())
  @@id([user_id, warehouse_id])
  @@index([user_id, warehouse_id]) // For fast lookup
}

// ProductWarehouse (stock per product per warehouse)
model ProductWarehouse {
  product_id    String
  warehouse_id  Int
  stock_qty     Int       @default(0)
  product       Product   @relation(fields: [product_id], references: [id], onDelete: Cascade)
  warehouse     Warehouse @relation(fields: [warehouse_id], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  @@id([product_id, warehouse_id])
  @@index([product_id, warehouse_id]) // For fast stock lookups
}

// Categories
model Category {
  id          String         @id @default(uuid())
  name        String      @unique
  description String?
  products    Product[]   // One-to-many
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// Products
model Product {
  id            String            @id @default(uuid())
  name          String
  sku           String            @unique
  unit          String
  cost_price    Decimal           @db.Decimal(10, 2)
  selling_price Decimal           @db.Decimal(10, 2)
  category_id   String?
  category      Category?         @relation(fields: [category_id], references: [id], onDelete: SetNull)
  purchase_items PurchaseItem[]    // One-to-many
  sale_items    SaleItem[]        // One-to-many
  product_stocks ProductWarehouse[] // One-to-many
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

// Purchases ( import table )
model Purchase {
  id            String             @id @default(uuid())
  user_id       String?
  warehouse_id  Int
  user          User?           @relation(fields: [user_id], references: [id], onDelete: SetNull)
  warehouse     Warehouse       @relation(fields: [warehouse_id], references: [id], onDelete: Restrict)
  date          DateTime
  total         Decimal         @db.Decimal(10, 2)
  source_country String?        // Tracks import country, e.g., "China"
  purchase_items PurchaseItem[] // One-to-many
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

// PurchaseItems ( item import from country )
model PurchaseItem {
  id            String       @id @default(uuid())
  purchase_id   String
  product_id    String
  purchase      Purchase  @relation(fields: [purchase_id], references: [id], onDelete: Cascade)
  product       Product   @relation(fields: [product_id], references: [id], onDelete: Restrict)
  qty           Int
  price         Decimal   @db.Decimal(10, 2)
  subtotal      Decimal   @db.Decimal(10, 2)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  @@map("PurchaseItems")
}

// Sales ( sale to customer )
model Sale {
  id            String           @id @default(uuid())
  customer_id   String
  user_id       String?
  warehouse_id  Int
  customer      Customer      @relation(fields: [customer_id], references: [id], onDelete: Restrict)
  user          User?         @relation(fields: [user_id], references: [id], onDelete: SetNull)
  warehouse     Warehouse     @relation(fields: [warehouse_id], references: [id], onDelete: Restrict)
  date          DateTime
  total         Decimal       @db.Decimal(10, 2)
  sale_items    SaleItem[]    // One-to-many
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

// SaleItems ( details sale items )
model SaleItem {
  id           String       @id @default(uuid())
  sale_id      String
  product_id   String
  sale         Sale      @relation(fields: [sale_id], references: [id], onDelete: Cascade)
  product      Product    @relation(fields: [product_id], references: [id], onDelete: Restrict)
  qty          Int
  price        Decimal   @db.Decimal(10, 2)
  subtotal     Decimal   @db.Decimal(10, 2)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  @@map("SaleItems")
}

// AuditLogs ( logs all activity in system except GET method )
model AuditLog {
  id          String       @id @default(uuid())
  user_id     String?
  user        User?     @relation(fields: [user_id], references: [id], onDelete: SetNull)
  action      String    // 'login', 'create', 'update', 'delete'
  entity_type String
  entity_id   Int?
  details     Json?
  timestamp   DateTime  @default(now())
}