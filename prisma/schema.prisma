// npx prisma migrate reset
//npx prisma migrate dev --name init
//npx prisma db push


generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Role Enum
enum RoleEnum {
  ADMIN
  WAREHOUSE_MANAGER
  SELLER
  AUDITOR
}
enum WarehouseType {
  MAIN
  BRANCH
  TEMPORARY
}
enum CustomerType {
  RETAILS
  WHOLESALE
  VIP
}
// Users
model User {
  id            String          @id @default(uuid())
  name          String
  email         String          @unique
  password      String
  img_url       String?
  phone         String?         @unique
  roleId      Int?
  role        Role?     @relation(fields: [roleId], references: [id])
  purchases     Purchase[]      // One-to-many
  sales         Sale[]          // One-to-many
  warehouse_id  Int?             
  warehouse     Warehouse?       @relation(fields: [warehouse_id], references: [id])
  audit_logs    AuditLog[]      // One-to-many
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@index([roleId, warehouse_id])
  @@map("user")
}
model Role {
  id            Int            @id @default(autoincrement())
  name          String          @unique
  description   String?
  users         User[]
  permissions   RolePermission[]
}

model Permission {
  id            Int            @id @default(autoincrement())
  name          String
  key           String          @unique
  roles         RolePermission[]
}

model RolePermission {
  id            Int             @id @default(autoincrement())
  roleId        Int
  permissionId  Int

  role          Role            @relation(fields: [roleId], references: [id])
  permission    Permission      @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
}

model Provinces {
  id            Int       @id @default(autoincrement())
  name          String    @unique
  district      Districts[] // one-to-many
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  customers     Customer[]
  @@map("province")
}
model Districts {
  id            String       @id @default(uuid())
  name          String    
  province_id   Int
  province      Provinces @relation(fields: [province_id], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([province_id])
  @@unique([province_id, name]) // name unique per province
  @@map("district")

}
// Customers
model Customer {
  id            String    @id @default(uuid())
  name          String
  phone         String?   @unique
  telegram      String?
  provinceId    Int
  province      Provinces @relation(fields: [provinceId], references: [id])
  img_url       String?
  lastOrderDate DateTime?
  totalOrders   Int       @default(0)
  totalSpent    Float     @default(0)
  mapUrl        String?
  sales         Sale[]    // One-to-many
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Warehouses
model Warehouse {
  id            Int               @id @default(autoincrement())
  name          String            @unique
  size          String            
  location      String           // e.g., "Hanoi", "Ho Chi Minh City"
  type          WarehouseType     @default(BRANCH)
  mapUrl        String?           // e.g., google map url
  img_url       String?
  purchases     Purchase[]        // One-to-many
  sales         Sale[]            // One-to-many
  product_stocks ProductWarehouse[] // One-to-many
  users         User[]            // Many-to-one with Users
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}


// ProductWarehouse (stock per product per warehouse)
model ProductWarehouse {
  product_id    String
  warehouse_id  Int
  stock_qty     Int       @default(0)
  product       Product   @relation(fields: [product_id], references: [id], onDelete: Cascade)
  warehouse     Warehouse @relation(fields: [warehouse_id], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  @@id([product_id, warehouse_id]) // cannot have the same product in the same warehouse twice
  @@index([product_id, warehouse_id]) // For fast stock lookups
}

// Categories
model Category {
  id          String      @id @default(uuid())
  name        String      @unique
  description String?
  products    Product[]   // One-to-many
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// Products
model Product {
  id            String            @id @default(uuid())
  name          String
  sku           String            @unique
  unit          String
  cost_price    Decimal           @db.Decimal(10, 2)
  selling_price Decimal           @db.Decimal(10, 2)
  category_id   String?
  category      Category?         @relation(fields: [category_id], references: [id], onDelete: SetNull)
  purchase_items PurchaseItem[]    // One-to-many
  sale_items    SaleItem[]        // One-to-many
  product_stocks ProductWarehouse[] // One-to-many
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

// Purchases ( import table )
model Purchase {
  id            String          @id @default(uuid())
  user_id       String?
  warehouse_id  Int
  user          User?           @relation(fields: [user_id], references: [id], onDelete: SetNull)
  warehouse     Warehouse       @relation(fields: [warehouse_id], references: [id], onDelete: Restrict)
  date          DateTime
  total         Decimal         @db.Decimal(10, 2)
  source_country String?        // Tracks import country, e.g., "China"
  purchase_items PurchaseItem[] // One-to-many
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

// PurchaseItems ( item import from country )
model PurchaseItem {
  id            String    @id @default(uuid())
  purchase_id   String
  product_id    String
  purchase      Purchase  @relation(fields: [purchase_id], references: [id], onDelete: Cascade)
  product       Product   @relation(fields: [product_id], references: [id], onDelete: Restrict)
  qty           Int
  price         Decimal   @db.Decimal(10, 2)
  subtotal      Decimal   @db.Decimal(10, 2)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  @@map("PurchaseItems") // actual table name in db
}

// Sales ( sale to customer )
model Sale {
  id            String        @id @default(uuid())
  customer_id   String
  user_id       String?
  warehouse_id  Int
  customer      Customer      @relation(fields: [customer_id], references: [id], onDelete: Restrict)
  user          User?         @relation(fields: [user_id], references: [id], onDelete: SetNull)
  warehouse     Warehouse     @relation(fields: [warehouse_id], references: [id], onDelete: Restrict)
  date          DateTime
  total         Decimal       @db.Decimal(10, 2)
  sale_items    SaleItem[]    // One-to-many
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

// SaleItems ( details sale items )
model SaleItem {
  id           String    @id @default(uuid())
  sale_id      String
  product_id   String
  sale         Sale      @relation(fields: [sale_id], references: [id], onDelete: Cascade)
  product      Product   @relation(fields: [product_id], references: [id], onDelete: Restrict)
  qty          Int
  price        Decimal   @db.Decimal(10, 2)
  subtotal     Decimal   @db.Decimal(10, 2)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  @@map("SaleItems")
}

// AuditLogs ( logs all activity in system except GET method )
model AuditLog {
  id          String       @id @default(uuid())
  user_id     String?
  user        User?     @relation(fields: [user_id], references: [id], onDelete: SetNull)
  action      String    // 'login', 'create', 'update', 'delete'
  entity_type String
  entity_id   Int?
  details     Json?
  timestamp   DateTime  @default(now())
}